blueprint:
  name: Wake-up light alarm with sunrise effect
  description: A wake-up light alarm with a brightness and color temperature sunrise
    effect using an existing timestamp sensor as source. Requires date_time_iso sensor
    in configuration!
  domain: automation
  input:
    light_entity:
      name: Wake-up light entity
      description: The light to control. Turning it off during the sunrise will keep
        it off. Color temperature range is auto-detected.
      selector:
        entity:
          domain: light
    timestamp_sensor:
      name: Alarm timestamp sensor
      description: 'Sensor with timestamp of next alarm with device_class: timestamp
        (set to ''none'' for manual alarm time)'
      default: none
      selector:
        entity:
          device_class: timestamp
    manual_time:
      name: Manual alarm time
      description: Manual alarm time. (ignored if alarm timestamp sensor is set, requires
        'date' sensor in config)
      default: 0:00:00
      selector:
        time: {}
    sunrise_duration:
      name: Sunrise duration
      description: The sunrise will start the configured number of minutes before
        the timestamp.
      default: 25
      selector:
        number:
          min: 5.0
          max: 60.0
          step: 5.0
          unit_of_measurement: min
          mode: slider
    max_brightness:
      name: Maximum brightness
      description: The brightness will be transitioned from 1% to the configured percentage.
      default: 100
      selector:
        number:
          min: 5.0
          max: 100.0
          step: 1.0
          unit_of_measurement: '%'
          mode: slider
    pre_sunrise_actions:
      name: Pre-sunrise actions
      description: Optional actions to run before sunrise starts. (use 'wait' for
        additional conditions)
      default: []
      selector:
        action: {}
  source_url: https://gist.github.com/sbyx/96c43b13b90ae1c35b872313ba1d2d2d
variables:
  light_entity: !input 'light_entity'
  timestamp_sensor: !input 'timestamp_sensor'
  sunrise_duration: !input 'sunrise_duration'
  max_brightness: !input 'max_brightness'
  manual_time: !input 'manual_time'
  start_mired: '{{ state_attr(light_entity, ''max_mireds'') }}'
  end_mired: '{{ state_attr(light_entity, ''min_mireds'') }}'
  tick_time: '{{ float(sunrise_duration) * 0.6 * (100 / float(max_brightness)) }}'
trigger:
- platform: time_pattern
  minutes: '*'
condition: []
action:
- wait_template: '{{ timestamp_sensor == ''none'' or as_timestamp(states(timestamp_sensor))
    != None }}'
- wait_template: '{{ 0 < as_timestamp(states(timestamp_sensor) if timestamp_sensor
    != ''none'' else now().year ~ ''-'' ~ now().month ~ ''-'' ~ now().day ~ '' ''
    ~ manual_time) - as_timestamp(states(''sensor.date_time_iso'')) < 60 * float(sunrise_duration)
    }}'
- choose: []
  default: !input 'pre_sunrise_actions'
- choose:
  - conditions:
    - condition: template
      value_template: '{{ state_attr(light_entity, ''min_mireds'') != None }}'
    sequence:
    - service: light.turn_on
      data:
        brightness_pct: 1
        color_temp: '{{ start_mired }}'
      entity_id: !input 'light_entity'
  default:
  - service: light.turn_on
    data:
      brightness_pct: 1
    entity_id: !input 'light_entity'
- repeat:
    while:
    - condition: template
      value_template: '{{ timestamp_sensor == ''none'' or as_timestamp(states(timestamp_sensor))
        != None }}'
    - condition: template
      value_template: '{{ 0 < as_timestamp(states(timestamp_sensor) if timestamp_sensor
        != ''none'' else now().year ~ ''-'' ~ now().month ~ ''-'' ~ now().day ~ ''
        '' ~ manual_time) - as_timestamp(states(''sensor.date_time_iso'')) < 60 *
        float(sunrise_duration) }}'
    sequence:
    - delay: '{{ tick_time }}'
    - choose:
      - conditions:
        - condition: state
          entity_id: !input 'light_entity'
          state: 'on'
        - condition: template
          value_template: '{{ timestamp_sensor == ''none'' or as_timestamp(states(timestamp_sensor))
            != None }}'
        - condition: template
          value_template: '{{ 0 < as_timestamp(states(timestamp_sensor) if timestamp_sensor
            != ''none'' else now().year ~ ''-'' ~ now().month ~ ''-'' ~ now().day
            ~ '' '' ~ manual_time) - as_timestamp(states(''sensor.date_time_iso''))
            < 60 * float(sunrise_duration) }}'
        sequence:
        - choose:
          - conditions:
            - condition: template
              value_template: '{{ state_attr(light_entity, ''min_mireds'') != None
                }}'
            sequence:
            - service: light.turn_on
              data:
                brightness_pct: '{{ (float(max_brightness) - (float(max_brightness)
                  * (as_timestamp(states(timestamp_sensor) if timestamp_sensor !=
                  ''none'' else now().year ~ ''-'' ~ now().month ~ ''-'' ~ now().day
                  ~ '' '' ~ manual_time) - as_timestamp(now())) / (float(sunrise_duration)
                  * 60))) | int }}'
                color_temp: '{{ (float(end_mired) + (float(start_mired) - float(end_mired))
                  * ((as_timestamp(states(timestamp_sensor) if timestamp_sensor !=
                  ''none'' else now().year ~ ''-'' ~ now().month ~ ''-'' ~ now().day
                  ~ '' '' ~ manual_time) - as_timestamp(now())) / (float(sunrise_duration)
                  * 60))) | int }}'
                transition: '{{ tick_time | int }}'
              entity_id: !input 'light_entity'
          default:
          - service: light.turn_on
            data:
              brightness_pct: '{{ (float(max_brightness) - (float(max_brightness)
                * (as_timestamp(states(timestamp_sensor) if timestamp_sensor != ''none''
                else now().year ~ ''-'' ~ now().month ~ ''-'' ~ now().day ~ '' ''
                ~ manual_time) - as_timestamp(now())) / (float(sunrise_duration) *
                60))) | int }}'
              transition: '{{ tick_time | int }}'
            entity_id: !input 'light_entity'
mode: single
max_exceeded: silent
